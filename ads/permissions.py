from rest_framework import permissions


class IsOwner(permissions.BasePermission):
    """
    Разрешение, позволяющее редактировать или удалять только свои объекты.

    Это разрешение проверяет, является ли текущий пользователь владельцем
    объекта, который он пытается редактировать или удалить. Если пользователь
    не является владельцем, доступ будет запрещен.
    """

    def has_object_permission(self, request, view, obj):
        """
        Проверяет, имеет ли пользователь разрешение на доступ к объекту.

        :param request: Объект запроса, содержащий информацию о текущем пользователе.
        :param view: Представление, в котором выполняется проверка разрешений.
        :param obj: Объект, к которому пользователь пытается получить доступ.
        :return: True, если пользователь является владельцем объекта, иначе False.
        """
        return obj.owner == request.user  # Проверяем, совпадает ли владелец объекта с текущим пользователем


class IsAdminOrReadOnly(permissions.BasePermission):
    """
    Разрешение, позволяющее администраторам редактировать или удалять объекты,
    а анонимным пользователям только получать доступ к ним.

    Это разрешение позволяет анонимным пользователям выполнять только
    безопасные методы (GET, HEAD, OPTIONS), в то время как администраторы
    могут выполнять любые действия (POST, PUT, DELETE и т.д.).
    """

    def has_permission(self, request, view):
        """
        Проверяет, имеет ли пользователь разрешение на выполнение действия.

        :param request: Объект запроса, содержащий информацию о текущем пользователе.
        :param view: Представление, в котором выполняется проверка разрешений.
        :return: True, если пользователь может выполнить действие, иначе False.
        """
        # Разрешить доступ для анонимных пользователей только для безопасных методов
        if request.method in permissions.SAFE_METHODS:
            return True
        # Разрешить доступ для администраторов
        return request.user and request.user.is_staff  # Проверяем, является ли пользователь администратором


class IsAuthor(permissions.BasePermission):
    def has_object_permission(self, request, view, obj):
        return obj.author == request.user
